From 73507315c191ea18c50afc27caf55deb748cbd66 Mon Sep 17 00:00:00 2001
From: baiywt <baiywt_gj@163.com>
Date: Thu, 20 Apr 2023 17:45:54 +0800
Subject: [PATCH] Fix compile error when build openwrt

---
 include/linux/cfi.h    | 6 +++---
 include/linux/module.h | 8 ++++----
 2 files changed, 7 insertions(+), 7 deletions(-)

--- a/include/linux/cfi.h
+++ b/include/linux/cfi.h
@@ -17,8 +17,8 @@ extern void __cfi_check(uint64_t id, voi
  * Force the compiler to generate a CFI jump table entry for a function
  * and store the jump table address to __cfi_jt_<function>.
  */
-#define __CFI_ADDRESSABLE(fn) \
-	const void* __cfi_jt_ ## fn __visible = (void *)&fn;
+#define __CFI_ADDRESSABLE(fn, __attr) \
+	const void *__cfi_jt_ ## fn __visible __attr = (void *)&fn
 
 #ifdef CONFIG_CFI_CLANG_SHADOW
 
@@ -34,7 +34,7 @@ static inline void cfi_module_remove(str
 
 #else /* !CONFIG_CFI_CLANG */
 
-#define __CFI_ADDRESSABLE(fn)
+#define __CFI_ADDRESSABLE(fn, __attr)
 
 #endif /* CONFIG_CFI_CLANG */
 
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@ -135,15 +135,15 @@ extern void cleanup_module(void);
 	{ return initfn; }					\
 	int init_module(void) __copy(initfn) 			\
 		__attribute__((alias(#initfn)));		\
-	__CFI_ADDRESSABLE(init_module)
+	__CFI_ADDRESSABLE(init_module, __initdata);
 
 /* This is only required if you want to be unloadable. */
 #define module_exit(exitfn)					\
 	static inline exitcall_t __maybe_unused __exittest(void)		\
 	{ return exitfn; }					\
-	void cleanup_module(void) __copy(exitfn) 		\
-		__attribute__((alias(#exitfn))); 		\
-	__CFI_ADDRESSABLE(cleanup_module)
+	void cleanup_module(void) __copy(exitfn)		\
+		__attribute__((alias(#exitfn)));		\
+	__CFI_ADDRESSABLE(cleanup_module, __exitdata);
 
 #endif
 
